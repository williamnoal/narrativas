import streamlit as st
import google.generativeai as genai
import json

# --- Configura√ß√£o da P√°gina ---
# Interface moderna, minimalista e sem scroll horizontal, ideal para Chromebooks.
st.set_page_config(
    page_title="F√°brica de Narrativas",
    page_icon="üìñ",
    layout="centered" # Layout centralizado foca na hist√≥ria
)

# --- Configura√ß√£o e Conex√£o Segura com o Modelo Generativo ---
try:
    # M√©todo seguro para buscar a chave da API, essencial para publica√ß√£o no GitHub.
    genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])
    model = genai.GenerativeModel('gemini-1.5-pro-latest')
except Exception:
    # Mensagem de erro clara caso a chave n√£o seja configurada no ambiente de deploy.
    st.error("A conex√£o com o Mestre das Hist√≥rias n√£o foi estabelecida. O administrador precisa configurar a chave de acesso.", icon="üîë")
    st.stop()

# --- Fun√ß√µes Principais ---

def gerar_conteudo_historia(prompt):
    """
    Fun√ß√£o robusta para chamar o modelo generativo.
    Envia um prompt e processa a resposta, esperando um JSON bem-formado.
    """
    # Instru√ß√£o aprimorada para o modelo, focando na consist√™ncia da sa√≠da JSON.
    # Esta t√©cnica de "prompt engineering" √© crucial para a estabilidade da aplica√ß√£o.
    instrucao_sistema = """
    Voc√™ √© um Mestre de Hist√≥rias para estudantes do sexto ano. Sua √∫nica fun√ß√£o √© gerar
    respostas em um formato JSON espec√≠fico. NUNCA responda com texto comum ou explica√ß√µes.
    Sua resposta DEVE ser um √∫nico bloco de c√≥digo JSON com as seguintes chaves:
    1. "texto": Uma string contendo o pr√≥ximo par√°grafo da hist√≥ria (entre 40 e 70 palavras).
    2. "opcoes": Uma lista de exatamente 3 strings, cada uma sendo uma op√ß√£o de escolha para o jogador.
       Se a hist√≥ria chegou a um final conclusivo, retorne uma lista vazia: [].
    A hist√≥ria deve ser criativa, apropriada para a idade e continuar o enredo fornecido.
    Exemplo de sa√≠da v√°lida:
    {
        "texto": "Voc√™ segue o brilho misterioso e encontra uma clareira. No centro, uma raposa com pelos prateados te observa com olhos inteligentes.",
        "opcoes": ["Tentar fazer amizade com a raposa.", "Observar de longe.", "Ignorar a raposa e seguir em frente."]
    }
    """
    try:
        response = model.generate_content([instrucao_sistema, prompt])
        # Limpeza rigorosa da resposta para extrair apenas o conte√∫do JSON.
        # Isso previne erros caso o modelo, por engano, adicione marcadores de c√≥digo (```json).
        json_text = response.text.strip().replace("```json", "").replace("```", "")
        return json.loads(json_text)
    except (json.JSONDecodeError, KeyError) as e:
        # Tratamento de erro espec√≠fico para JSON inv√°lido ou chaves faltando.
        st.error("O Mestre das Hist√≥rias parece confuso e retornou uma p√°gina em branco. Por favor, tente novamente.", icon="üìú")
        return None
    except Exception as e:
        # Tratamento de erro gen√©rico para problemas de API (ex: sobrecarga, falha de conex√£o).
        st.error(f"Houve uma falha na comunica√ß√£o com o mundo das hist√≥rias. Tente recome√ßar.", icon="‚ö°")
        return None

# --- Gerenciamento de Estado da Sess√£o ---
# Usar st.session_state √© a forma correta de manter os dados durante a navega√ß√£o do usu√°rio.
if 'etapa' not in st.session_state:
    st.session_state.etapa = 'inicio' # Controla qual tela √© exibida
if 'historico' not in st.session_state:
    st.session_state.historico = [] # Armazena os par√°grafos da hist√≥ria
if 'tema' not in st.session_state:
    st.session_state.tema = ""

# --- Interface do Usu√°rio ---

# ETAPA 1: TELA INICIAL
if st.session_state.etapa == 'inicio':
    st.title("üìñ F√°brica de Narrativas Interativas ‚ú®")
    st.markdown("### Uma aventura que se cria a cada escolha sua!")
    
    tema_input = st.text_input(
        "Qual ser√° o tema da sua jornada? Comece com uma ideia:",
        placeholder="Ex: um mist√©rio no laborat√≥rio da escola, uma viagem a um planeta de cristal..."
    )
    
    if st.button("Criar Aventura!", type="primary"):
        if tema_input:
            st.session_state.tema = tema_input
            with st.spinner("As p√°ginas da sua aventura est√£o sendo escritas..."):
                prompt_inicial = f"Inicie uma hist√≥ria de aventura com o tema: '{st.session_state.tema}'"
                dados_historia = gerar_conteudo_historia(prompt_inicial)
            
            if dados_historia:
                st.session_state.historico = [dados_historia]
                st.session_state.etapa = 'jogando'
                st.experimental_rerun()
        else:
            st.warning("Toda grande hist√≥ria precisa de um come√ßo. Por favor, digite um tema.")

# ETAPA 2: TELA DA AVENTURA
elif st.session_state.etapa == 'jogando':
    st.title("üìñ A Sua Aventura")
    
    # Exibe o hist√≥rico da narrativa
    for i, parte in enumerate(st.session_state.historico):
        st.markdown(f"> {parte['texto']}")
        st.markdown("---")

    parte_atual = st.session_state.historico[-1]
    
    # Verifica se a hist√≥ria chegou ao fim (lista de op√ß√µes vazia).
    if not parte_atual["opcoes"]:
        st.success("FIM DA AVENTURA!")
        st.balloons()
    else:
        st.subheader("O que voc√™ faz agora?")
        for opcao in parte_atual["opcoes"]:
            if st.button(opcao, key=opcao, use_container_width=True):
                with st.spinner("O destino est√° sendo tra√ßado..."):
                    # Constr√≥i o contexto da hist√≥ria para dar continuidade
                    contexto = f"O tema inicial era: '{st.session_state.tema}'.\n"
                    for p in st.session_state.historico:
                        contexto += p['texto'] + " "
                    
                    prompt_continuacao = f"Contexto da hist√≥ria: {contexto}\nA √∫ltima escolha do jogador foi: '{opcao}'. Continue a hist√≥ria a partir da√≠."
                    
                    novos_dados = gerar_conteudo_historia(prompt_continuacao)
                    if novos_dados:
                        st.session_state.historico.append(novos_dados)
                        st.experimental_rerun()
    
    # Bot√£o para reiniciar a qualquer momento
    if st.button("Come√ßar uma Nova Hist√≥ria", type="secondary"):
        st.session_state.etapa = 'inicio'
        st.session_state.historico = []
        st.session_state.tema = ""
        st.experimental_rerun()
